{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-08-24-holy-grail-layout.html","result":{"data":{"markdownRemark":{"html":"<p>The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented.</p>\n<p>Most CSS solutions for Holy Grail aim to meet a few goals:</p>\n<ul>\n<li>They should have a fluid center with fixed-width sidebars.</li>\n<li>The center column(main content) should appear first in the HTML source.</li>\n<li>All columns should be the same height, regarless of which column is actually the tallest.</li>\n<li>They should require minimal markup.</li>\n<li>The footer should \"stick\"  to the bottom of the page when content is sparse.</li>\n</ul>\n<p>And one of the most classic templates is like this:</p>\n<h4>Holy Grails Layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pJMRgB\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pJMRgB/'>Classic Holy Grail</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<p>We can see that how <em>float:left</em> and <em>nagative margin-left</em> are used to let sidebars stick aside. Besides combining <em>padding-bottom: 999px, margin-bottom: -999px</em>, it is able to make the same height for all columns.However, it is not adaptive enough because the main content part need to be set a pair of fixed padding values.</p>\n<p>Then the Taobao UED create a more adaptive and advanced version of this classic layout.</p>\n<h4>Wings layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"BNXQMJ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/BNXQMJ/'>Wings Layout</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<br>\n<br>\n<br>\n<br>\n<h4>More info for Holy Grail layouts:</h4>\n<ul>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">Holy Grail Layout solved by Flexbox</a></li>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">A list of solutions</a></li>\n</ul>","frontmatter":{"title":"Holy Grail Layout","tags":["LAYOUT","HTML"],"excerpt":null},"fields":{"date":"August 23, 2015","path":"/2015-08-24-holy-grail-layout.html","slug":"/blog/2015/08/24/holy-grail-layout.html"}}},"pageContext":{"title":"Holy Grail Layout","slug":"/blog/2015/08/24/holy-grail-layout.html","prev":{"html":"<p>Functions can use objects to remember the results of previous operations, making it possible to avoid unnecessary work. This optimization is called memoization. JavaScriptâ€™s objects and arrays are very convenient for this.</p>\n<p>In JavaScript we can keep our momoized results in a memo array by using closure feature. When our function is called, it first looks to see if it already knows the result. If it does, it can immediately return it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fibonnaci <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fib</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This function substantially reduce the amount of work.</p>\n<p>We can generalize this by making a function that helps us make memoized functions.</p>\n<h4>The memoized function:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">memoizer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">memo fundamental</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">shell</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> <span class=\"token function\">fundamental</span><span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> shell<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can define fibonacci with the memoizer:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fibonacci <span class=\"token operator\">=</span> <span class=\"token function\">memoizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shell<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Besides, we can produce a memoizing factorial function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> factorial <span class=\"token operator\">=</span> <span class=\"token function\">memoizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shell<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","id":"1fffff10-4665-5a0f-bbf8-cd31d2ac0db8","excerpt":"Functions can use objects to remember the results of previous operations, making it possible to avoid unnecessary work. This optimization is called memoization. JavaScriptâ€™s objects and arrays are very convenient for this. In JavaScript we can keep our momoized results in a memoâ€¦","frontmatter":{"title":"Memoization (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/19/memoization.html","date":"September 18, 2015","path":"/2015-09-19-memoization.html"}},"next":{"html":"<p>I added a tooltip for my social links. I use jQuery to set the tooltip. jQuery is an amazing framework that make my work more efficient.</p>","id":"2ef4b31b-40c9-547b-9621-8f76673b8555","excerpt":"I added a tooltip for my social links. I use jQuery to set the tooltip. jQuery is an amazing framework that make my work more efficient.","frontmatter":{"title":"Tooltip","excerpt":null,"tags":["GADGET","JQUERY"]},"fields":{"slug":"/blog/2015/08/31/tooltip.html","date":"August 30, 2015","path":"/2015-08-31-tooltip.html"}}}},"staticQueryHashes":[]}