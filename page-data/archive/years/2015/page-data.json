{"componentChunkName":"component---src-templates-years-js","path":"/archive/years/2015","result":{"pageContext":{"posts":[{"html":"<p>Hello world~~</p>\n<p>hello world, enjoy the blogging</p>\n<!-- more -->\n<p>my first ariticle,say something here</p>","id":"3a221e10-04b6-55e6-976a-04bd8301120c","excerpt":"Hello world~~ hello world, enjoy the blogging","frontmatter":{"title":"Testing Post","excerpt":"Hello world","tags":null},"fields":{"slug":"/blog/2015/08/12/hello-world.html","date":"August 11, 2015","path":"/2015-08-12-hello-world.html"}},{"html":"<p>Another step</p>\n<p>Tonight I create a post template. It's not a easy task. I was quite confused about the usage of jekyll. I thought some of the features were out of work. Then I took a gander with other blogs and their source. It is very useful. And I finally found a way to solve my problem. Hooray~~~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Note:\n\t- the usage of include\n\t- use markdownify to tranform page.content to markdown format\n\t- the difference between relative and definite directory\n\t- the usage of viewport</code></pre></div>","id":"9da6e3cc-74a9-5d87-82a5-e7defe83875d","excerpt":"Another step Tonight I create a post template. It's not a easy task. I was quite confused about the usage of jekyll. I thought some of the features were out of work. Then I took a gander with other blogs and their source. It is very useful. And I finally found a way to solve my…","frontmatter":{"title":"Create Post Template","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/08/15/create-post-template.html","date":"August 14, 2015","path":"/2015-08-15-create-post-template.html"}},{"html":"<p>I migrated my bootstrap blog to GitHub pages. Now I build my GitHub blog from cratch. I will try to perfect it. </p>","id":"9e2f857c-d065-57cd-8cd9-f07d5346ffd6","excerpt":"I migrated my bootstrap blog to GitHub pages. Now I build my GitHub blog from cratch. I will try to perfect it.","frontmatter":{"title":"Bootstrap","excerpt":null,"tags":["BOOTSTRAP","LAYOUT"]},"fields":{"slug":"/blog/2015/08/13/bootstrap.html","date":"August 12, 2015","path":"/2015-08-13-bootstrap.html"}},{"html":"<p>Today I set up the paginator[<a href=\"http://jekyllrb.com/docs/pagination/\">1</a>,<a href=\"http://www.ericlagergren.com/blog/jekyll-pagination/\">2</a>] and comment[<a href=\"http://duoshuo.com/\">3</a>] modal on my blog. Besides I fixed some layout glitches, too. It looks much better now. </p>","id":"6147ad3c-a1ca-5520-9eb2-b2ee5c4d3d7c","excerpt":"Today I set up the paginator[1,2] and comment[3] modal on my blog. Besides I fixed some layout glitches, too. It looks much better now.","frontmatter":{"title":"Paginator and Comment Modal","excerpt":null,"tags":["MODAL","GADGET"]},"fields":{"slug":"/blog/2015/08/15/paginator-and-comment.html","date":"August 14, 2015","path":"/2015-08-15-paginator-and-comment.html"}},{"html":"<p>This is my first blog</p>\n<p>I start this blog on 12/08/2015.</p>\n<p>This is really amazing. I can see my webpage everywhere.</p>\n<p>And I learned some new stuffs like: </p>\n<ul>\n<li>github page</li>\n<li>jekyll</li>\n<li>liquid</li>\n<li>ruby on rails</li>\n</ul>\n<p>I hope I could get the hang of github pages soon</p>","id":"a66f3311-4405-59c6-83e1-2bf8203b999e","excerpt":"This is my first blog I start this blog on 12/08/2015. This is really amazing. I can see my webpage everywhere. And I learned some new stuffs like:  github page jekyll liquid ruby on rails I hope I could get the hang of github pages soon","frontmatter":{"title":"First post","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/08/13/first-post.html","date":"August 12, 2015","path":"/2015-08-13-first-post.html"}},{"html":"<p>The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented.</p>\n<p>Most CSS solutions for Holy Grail aim to meet a few goals:</p>\n<ul>\n<li>They should have a fluid center with fixed-width sidebars.</li>\n<li>The center column(main content) should appear first in the HTML source.</li>\n<li>All columns should be the same height, regarless of which column is actually the tallest.</li>\n<li>They should require minimal markup.</li>\n<li>The footer should \"stick\"  to the bottom of the page when content is sparse.</li>\n</ul>\n<p>And one of the most classic templates is like this:</p>\n<h4>Holy Grails Layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pJMRgB\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pJMRgB/'>Classic Holy Grail</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<p>We can see that how <em>float:left</em> and <em>nagative margin-left</em> are used to let sidebars stick aside. Besides combining <em>padding-bottom: 999px, margin-bottom: -999px</em>, it is able to make the same height for all columns.However, it is not adaptive enough because the main content part need to be set a pair of fixed padding values.</p>\n<p>Then the Taobao UED create a more adaptive and advanced version of this classic layout.</p>\n<h4>Wings layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"BNXQMJ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/BNXQMJ/'>Wings Layout</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<br>\n<br>\n<br>\n<br>\n<h4>More info for Holy Grail layouts:</h4>\n<ul>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">Holy Grail Layout solved by Flexbox</a></li>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">A list of solutions</a></li>\n</ul>","id":"1c202194-c429-51e5-b76c-f4c6eedef83b","excerpt":"The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented. Most CSS solutions for Holy Grail aim to meet a few goals: They should have a fluid center with fixed…","frontmatter":{"title":"Holy Grail Layout","excerpt":null,"tags":["LAYOUT","HTML"]},"fields":{"slug":"/blog/2015/08/24/holy-grail-layout.html","date":"August 23, 2015","path":"/2015-08-24-holy-grail-layout.html"}},{"html":"<p>Today I set up the music player and slide show modal for my blog. I generate the music player from <a href=\"http://music.163.com\">Netease Music</a>. It's very easy, you could create an external link from an album. For carousel, it's kinda complicated and challenging. But with the help of <a href=\"http://jekyll.tips/tutorials/photo-gallery/\">Jekyll tips</a>, I did accomplish it at last. I think I should better understand the Jekyll and Liquid.</p>","id":"303398d6-70e4-5a92-adb5-57bdd35496c2","excerpt":"Today I set up the music player and slide show modal for my blog. I generate the music player from Netease Music. It's very easy, you could create an external link from an album. For carousel, it's kinda complicated and challenging. But with the help of Jekyll tips, I did…","frontmatter":{"title":"Slide Show","excerpt":null,"tags":["MODAL"]},"fields":{"slug":"/blog/2015/08/16/carousel.html","date":"August 15, 2015","path":"/2015-08-16-carousel.html"}},{"html":"<p>Today I tried to figure out how to use some pretty icon to show my contact at footer. Then I found <a href=\"http://fontawesome.dashgame.com/\">Font-awesome</a>. It has a vast variety of useful website icons which is designed for Bootstrap. It is controlled by CSS that can create many amazing effects. It satifies all I need and make my site look nicer.</p>","id":"b01fc389-3e99-5191-8bd8-a0174b6cfd2f","excerpt":"Today I tried to figure out how to use some pretty icon to show my contact at footer. Then I found Font-awesome. It has a vast variety of useful website icons which is designed for Bootstrap. It is controlled by CSS that can create many amazing effects. It satifies all I need and…","frontmatter":{"title":"Font-awesome","excerpt":null,"tags":["ICON","FONT"]},"fields":{"slug":"/blog/2015/08/22/font-awesome.html","date":"August 21, 2015","path":"/2015-08-22-font-awesome.html"}},{"html":"<p>I added a tooltip for my social links. I use jQuery to set the tooltip. jQuery is an amazing framework that make my work more efficient.</p>","id":"2ef4b31b-40c9-547b-9621-8f76673b8555","excerpt":"I added a tooltip for my social links. I use jQuery to set the tooltip. jQuery is an amazing framework that make my work more efficient.","frontmatter":{"title":"Tooltip","excerpt":null,"tags":["GADGET","JQUERY"]},"fields":{"slug":"/blog/2015/08/31/tooltip.html","date":"August 30, 2015","path":"/2015-08-31-tooltip.html"}},{"html":"<p>Because Jekyll doesn't fully support tagging feature. I learned how to feature tags into my blogs. I found  several ways. Fianlly I made it work by following the guides given by <a href=\"http://www.minddust.com/post/tags-and-categories-on-github-pages/\">MIDDUST</a>. This method need no plugin but you have to  generate a separate page everytime you create a new tag.  So it's like a work-around method.</p>\n<p>Here are other methods may help:</p>\n<ul>\n<li><a href=\"http://charliepark.org/tags-in-jekyll/\">Tags In Jekyll by Charlie Park(using Rugy plugin)</a></li>\n<li><a href=\"An%20easy%20way%20to%20support%20tags%20in%20a%20jekyll%20blog\">A method similar to MIDDUST</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000406017\">A method using JSON</a></li>\n</ul>","id":"f1829ade-cfaf-5e69-8d90-d117c89549f4","excerpt":"Because Jekyll doesn't fully support tagging feature. I learned how to feature tags into my blogs. I found  several ways. Fianlly I made it work by following the guides given by MIDDUST. This method need no plugin but you have to  generate a separate page everytime you create a…","frontmatter":{"title":"Creating Tags","excerpt":null,"tags":["GADGET"]},"fields":{"slug":"/blog/2015/09/03/tag.html","date":"September 02, 2015","path":"/2015-09-03-tag.html"}},{"html":"<p>I created a button style with some fancy effects. It only depends on HTML + CSS. It shows the power of CSS transform and transition properties. However the CSS code is somehow redundant and prolix. I am going to learn a CSS preprocessor like SCSS to improve efficiency.</p>\n<h4>Ghost Button</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pjoRWQ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pjoRWQ/'>Ghost Button</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","id":"4df17781-6697-5114-982c-48eb8b21c917","excerpt":"I created a button style with some fancy effects. It only depends on HTML + CSS. It shows the power of CSS transform and transition properties. However the CSS code is somehow redundant and prolix. I am going to learn a CSS preprocessor like SCSS to improve efficiency. Ghost…","frontmatter":{"title":"Ghost Button","excerpt":null,"tags":["GADGET","CSS"]},"fields":{"slug":"/blog/2015/09/01/ghost-button.html","date":"August 31, 2015","path":"/2015-09-01-ghost-button.html"}},{"html":"<blockquote>\n<p>From today on, I will write down some notes about the book <em>JavaScript The Good Parts</em>.</p>\n</blockquote>\n<p>Global variables are horrible in JavaScript. If you don't use them wisely, they will lurk in your code until break down your application. Because when your unconciously create a local variable with the same name of the global variables, terrible things will happen. So in many cases, global variables should be avoided.</p>\n<p>One way to minimize the use of global variables it to create a single global variable container.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">MYAPP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>stooge <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token string\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joe\"</span>\n    <span class=\"token string\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Howard\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>flight <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nairline<span class=\"token operator\">:</span> <span class=\"token string\">\"Oceanic\"</span><span class=\"token punctuation\">,</span>\nnumber<span class=\"token operator\">:</span> <span class=\"token number\">815</span><span class=\"token punctuation\">,</span>\ndeparture<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">IATA</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SYD\"</span><span class=\"token punctuation\">,</span>\n    time<span class=\"token operator\">:</span> <span class=\"token string\">\"2004-09-22\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Sydney\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\narrival<span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">IATA</span><span class=\"token operator\">:</span> <span class=\"token string\">\"LAX\"</span><span class=\"token punctuation\">,</span>\n    time<span class=\"token operator\">:</span> <span class=\"token string\">\"2004-09-23\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Los Angeles\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By including your global footprint into a single name, it is significantly reducing the chance of bad interaction with other modules. And it is more readable, since MYAPP is like a namespace referring to its application.</p>","id":"953f73f4-2dec-58bc-8599-5b6101b3ba88","excerpt":"From today on, I will write down some notes about the book JavaScript The Good Parts. Global variables are horrible in JavaScript. If you don't use them wisely, they will lurk in your code until break down your application. Because when your unconciously create a local variable…","frontmatter":{"title":"Global Variables (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/14/global-variables.html","date":"September 13, 2015","path":"/2015-09-14-global-variables.html"}},{"html":"<p>Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google search API. However, because of the goddamn GFW, it is invalid to use. So I resorted to other plausible ways. Here are three major solutions may work:</p>\n<ol>\n<li>\n<p><strong>JavaScript and JSON technique</strong></p>\n<ul>\n<li><a href=\"https://alexpearce.me/2012/04/simple-jekyll-searching/\">Simple Jekyll Searching by Alex Pearce</a>This solution is lack of full-text search feature.)</li>\n<li><a href=\"https://github.com/christian-fei/Simple-Jekyll-Search\">Simple-Jekyll-Search by christian-fei</a> A JavaScript library to add search functionality to any Jekyll blog.</li>\n<li><a href=\"http://kingauthur.info/2012/12/03/the-things-about-jekyll/\">Add static searching to Jekyll</a> </li>\n</ul>\n</li>\n<li><strong><a href=\"https://github.com/slashdotdash/jekyll-lunr-js-search\">lunr.js and Ruby Gem plugins</a> </strong></li>\n<li><strong><a href=\"https://swiftype.com/site-search\">A powerful third party search engine</a> It is a hosted and easy-deploy search solution.</strong></li>\n</ol>\n<p>Finally I adopted the third solution. It's very easy to deploy. You just need to follow instruction to set it up. Someday later I would like to try other two methods.</p>","id":"6341acb1-c251-5aab-bdd9-9b09c7059d31","excerpt":"Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google…","frontmatter":{"title":"Search Bar","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/04/searching.html","date":"September 03, 2015","path":"/2015-09-04-searching.html"}},{"html":"<p> Before talking about closure, let's start with scope first. <em>Scope</em> is\na programming language controls the visibility and lifetimes of variables and parameters. Most languages have block scope, which means that a block of statements wrapped with curly braces  are not visible from outside of the block. </p>\n<p> However JavaScript does not have block scope even though its block syntax suggests that it does. JavaScript does have function scope. It means that a variable defined within a function is visible everywhere within the function.\nThe closure feature is derived from function scope service. It enjoys the privilege of access to the outer value variable.</p>\n<p>Typically, closure can be used to give each handler a unique number.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add_the_handlers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this snippet, it defines a  function and immediately invoke it, passing in i. That function will return an event handler function that is bound to the value of i that was passed in.</p>\n<p>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\nIt is worth noticing that in JavaScript, the inner function can have a longer lifetime than its outer function.\n=======\nIt is worth noticing that in JavaScript, the inner function can have a longer lifetim than its outer funciton.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>origin/master</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Instead of initializing myObject with an object literal, we will initialize myObject by calling a function that returns an object literal.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                value <span class=\"token operator\">+=</span> <span class=\"token keyword\">typeof</span> inc <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> inc <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">getValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><b>We are not assigning a function to myObject. We are assigning the result of invoking that function.</b> Notice the () on the last line. The function returns an object containing two methods, and those methods continue to enjoy the privilege of access to the value variable.</p>","id":"478bf3a7-91f4-53cf-a323-5e79778bd47f","excerpt":"Before talking about closure, let's start with scope first. Scope is\n a programming language controls the visibility and lifetimes of variables and parameters. Most languages have block scope, which means that a block of statements wrapped with curly braces  are not visible from…","frontmatter":{"title":"Closure (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/18/closure.html","date":"September 17, 2015","path":"/2015-09-18-closure.html"}},{"html":"<p>JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Morever, we can augment a specific type with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Number<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'integer'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'ceiling'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'floor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This method helps us convert a Number type to integer.</p>","id":"c68d6941-e9c8-5f2c-a6d8-ac9b4d650ddf","excerpt":"JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this: Morever, we can augment a specific type with a new method like this…","frontmatter":{"title":"Augmenting types (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/16/augment-type.html","date":"September 15, 2015","path":"/2015-09-16-augment-type.html"}},{"html":"<p>Functions can use objects to remember the results of previous operations, making it possible to avoid unnecessary work. This optimization is called memoization. JavaScript’s objects and arrays are very convenient for this.</p>\n<p>In JavaScript we can keep our momoized results in a memo array by using closure feature. When our function is called, it first looks to see if it already knows the result. If it does, it can immediately return it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fibonnaci <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fib</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This function substantially reduce the amount of work.</p>\n<p>We can generalize this by making a function that helps us make memoized functions.</p>\n<h4>The memoized function:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">memoizer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">memo fundamental</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">shell</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> <span class=\"token function\">fundamental</span><span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> shell<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can define fibonacci with the memoizer:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fibonacci <span class=\"token operator\">=</span> <span class=\"token function\">memoizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shell<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Besides, we can produce a memoizing factorial function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> factorial <span class=\"token operator\">=</span> <span class=\"token function\">memoizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shell<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">shell</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","id":"1fffff10-4665-5a0f-bbf8-cd31d2ac0db8","excerpt":"Functions can use objects to remember the results of previous operations, making it possible to avoid unnecessary work. This optimization is called memoization. JavaScript’s objects and arrays are very convenient for this. In JavaScript we can keep our momoized results in a memo…","frontmatter":{"title":"Memoization (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/19/memoization.html","date":"September 18, 2015","path":"/2015-09-19-memoization.html"}},{"html":"<p>A module is a function or object that presents an interface but that hides its state and implementation. The module pattern takes advantage of function scope and closure to create relationships that are binding and private.</p>\n<p>The general pattern of a module is a function that defines private variables and functions; creates privileged functions which, through closure, will have access to the private variables and functions; and that returns the privileged functions or stores them in an accessible place. For example, if we want to make an object that produces a serial number:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">serial_maker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> prefix <span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> seq <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">set_prefix</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                prefix <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">set_seq</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                seq <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">gensym</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> seq<span class=\"token punctuation\">;</span>\n                seq <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> seqer <span class=\"token operator\">=</span> <span class=\"token function\">serial_maker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seqer<span class=\"token punctuation\">.</span>set_prefix <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seqer<span class=\"token punctuation\">.</span>set_seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> unique <span class=\"token operator\">=</span> seqer<span class=\"token punctuation\">.</span><span class=\"token function\">gensym</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unique is \"Q1000\"</span></code></pre></div>\n<p>The methods do not make use of this or that. As a result, there is no way to compromise the seqer. It isn’t possible to get or change the prefix or seq except as permitted by the methods. The seqer object is mutable, so the methods could be replaced, but that still does not give access to its secrets. seqer is simply a collection of functions, and those functions are capabilities that grant specific powers to use or modify the secret state.</p>","id":"ff7ff895-3101-5f52-b0ed-617f8df57a99","excerpt":"A module is a function or object that presents an interface but that hides its state and implementation. The module pattern takes advantage of function scope and closure to create relationships that are binding and private. The general pattern of a module is a function that…","frontmatter":{"title":"Module (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/21/module.html","date":"September 20, 2015","path":"/2015-09-21-module.html"}},{"html":"<p>Inheritance is a big topic in JavaScript. Unlike Java or C++ which are object-oriented languages and they can inherit other classes, JavaScript is a prototypal by nature. So the inheritance pattern in JavaScript is far more complicated for me. I still couldn't totally understand how inheritance pattern work after I finished this section.</p>\n<p>Then I found a post which was very helpful. <em><a href=\"http://davidshariff.com/blog/javascript-inheritance-patterns/\">JavaScript Inheritance Patterns</a></em> introduces 3 different ways of how to implement inheritance in JavaScript.</p>\n<h4>Pseudoclassical pattern</h4>\n<ol>\n<li>Invoke a constructor function.</li>\n<li>Point a child’s prototype to the parent’s prototype for inheritance to occur.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Point a child's prototype to a parent's prototype\n **/</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">extendObj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childObj<span class=\"token punctuation\">,</span> parentObj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    childObj<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> parentObj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//base human object</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Human</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//inhertiable attributes / methods </span>\n<span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    gender<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    planetOfBirth<span class=\"token operator\">:</span> <span class=\"token string\">'Earth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">sayGender</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'\\'s gender is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">sayPlanet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' was born on '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetOfBirth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//male</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Male</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Davide'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//inherits human</span>\n<span class=\"token function\">extendObj</span><span class=\"token punctuation\">(</span>Male<span class=\"token punctuation\">,</span> Human<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Female</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'Female'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//inherits human</span>\n<span class=\"token function\">extendObj</span><span class=\"token punctuation\">(</span>Female<span class=\"token punctuation\">,</span> Human<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//new instances</span>\n<span class=\"token keyword\">var</span> davide <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Male</span><span class=\"token punctuation\">(</span><span class=\"token string\">'David'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Female</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jane'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\ndavid<span class=\"token punctuation\">.</span><span class=\"token function\">sayGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David says my gender is Male</span>\njane<span class=\"token punctuation\">.</span><span class=\"token function\">sayGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jane says my gender is Female</span>\n\n<span class=\"token class-name\">Male</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>planetOfBirth <span class=\"token operator\">=</span> <span class=\"token string\">'Mars'</span><span class=\"token punctuation\">;</span>\ndavid<span class=\"token punctuation\">.</span><span class=\"token function\">sayPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David was born on Mars</span>\njane<span class=\"token punctuation\">.</span><span class=\"token function\">sayPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jane was born on Mars</span></code></pre></div>\n<h4>Functional pattern</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">human</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    that<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    that<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    that<span class=\"token punctuation\">.</span>planetOfBirth <span class=\"token operator\">=</span> <span class=\"token string\">'Earth'</span><span class=\"token punctuation\">;</span>\n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayGender</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'\\'s gender is '</span> <span class=\"token operator\">+</span> that<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    that<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayPlanet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' was born on '</span> <span class=\"token operator\">+</span> that<span class=\"token punctuation\">.</span>planetOfBirth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">male</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token function\">human</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    that<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> david <span class=\"token operator\">=</span> <span class=\"token function\">male</span><span class=\"token punctuation\">(</span><span class=\"token string\">'David'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> <span class=\"token function\">female</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jane'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndavid<span class=\"token punctuation\">.</span><span class=\"token function\">sayGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David says my gender is Male</span>\njane<span class=\"token punctuation\">.</span><span class=\"token function\">sayGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jane says my gender is Female</span>\n\ndavid<span class=\"token punctuation\">.</span>planetOfBirth <span class=\"token operator\">=</span> <span class=\"token string\">'Mars'</span><span class=\"token punctuation\">;</span>\ndavid<span class=\"token punctuation\">.</span><span class=\"token function\">sayPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David was born on Mars</span>\njane<span class=\"token punctuation\">.</span><span class=\"token function\">sayPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jane was born on Earth</span></code></pre></div>\n<h4>Prototypal pattern</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/***************************************************************\n     * Helper functions for older browsers\n     ***************************************************************/</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">tmpObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            tmpObj<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> parentObj<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tmpObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'defineProperties'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">defineProperties</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/*************************************************************/</span>\n\n    <span class=\"token keyword\">var</span> human <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        gender<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        planetOfBirth<span class=\"token operator\">:</span> <span class=\"token string\">'Earth'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">sayGender</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' says my gender is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">sayPlanet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' was born on '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>planetOfBirth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> male <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        gender<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> female <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        gender<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'Female'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> david <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>male<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        planetOfBirth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'Mars'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> jane <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>female<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    david<span class=\"token punctuation\">.</span><span class=\"token function\">sayGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David says my gender is Male</span>\n    david<span class=\"token punctuation\">.</span><span class=\"token function\">sayPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David was born on Mars</span>\n\n    jane<span class=\"token punctuation\">.</span><span class=\"token function\">sayGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jane says my gender is Female</span>\n    jane<span class=\"token punctuation\">.</span><span class=\"token function\">sayPlanet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jane was born on Earth</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","id":"55dc3fda-629a-5f23-b109-8540c85f64d2","excerpt":"Inheritance is a big topic in JavaScript. Unlike Java or C++ which are object-oriented languages and they can inherit other classes, JavaScript is a prototypal by nature. So the inheritance pattern in JavaScript is far more complicated for me. I still couldn't totally understand…","frontmatter":{"title":"Inheritance (JS the good parts)","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/22/inheritance.html","date":"September 21, 2015","path":"/2015-09-22-inheritance.html"}},{"html":"<p>Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Function<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'curry'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> add1 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 7</span></code></pre></div>\n<p>The curry method works by creating a closure that holds that original function and the arguments to curry. It returns a function that, when invoked, returns the result of calling that original function, passing it all of the arguments from the invocation of curry and the current invocation. It uses the Array concat method to concatenate the two arrays of arguments together.</p>","id":"bdb2849f-c688-57ee-9b55-d246e860996e","excerpt":"Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype. The curry method works by creating a closure…","frontmatter":{"title":"Curry","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/19/curry.html","date":"September 18, 2015","path":"/2015-09-19-curry.html"}},{"html":"<p>AJAX( Asynchronous Javascript and XML), is a web development technique for creating interactive web application. In conventional web applications, it transmits information to and from the server using synchronous requests. It means that when you fill out a form and submit, you will get directed to a new page with new informaiton from the server. With AJAX, when you transmit a part of information, it will make a request to server, interpret the results, and update the current page.</p>\n<p>The process of Ajax request comprises of 4 stages: </p>\n<ol>\n<li>The client uses open() to initiate and set the request method like GET or POST.</li>\n<li>The client uses send() to send the request server.</li>\n<li>The server receives the request and send back the response status to client.</li>\n<li>The client respond to server according to the status code(e.g. <em>200</em> means success). </li>\n</ol>\n<h4>Here is an AJAX simple example:</h4>\n<h4>The client-side code:</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>员工查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>请输入员工编号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keyword<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>searchResult<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>员工新建<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>请输入员工姓名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staffName<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>请输入员工编号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staffNumber<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>请选择员工性别：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staffSex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>女<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>男<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>请输入员工职位：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>staffJob<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>保存<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createResult<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n        $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n            type<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>    \n            url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://127.0.0.1:8080/ajaxdemo/serverjson2.php?number=\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#keyword\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n                    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#searchResult\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#searchResult\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现错误：\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>  \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jqXHR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     \n               <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生错误：\"</span> <span class=\"token operator\">+</span> jqXHR<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#save\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n        $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n            type<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>   \n            url<span class=\"token operator\">:</span> <span class=\"token string\">\"serverjson.php\"</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                name<span class=\"token operator\">:</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#staffName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                number<span class=\"token operator\">:</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#staffNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                sex<span class=\"token operator\">:</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#staffSex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                job<span class=\"token operator\">:</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#staffJob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n                    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#createResult\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#createResult\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现错误：\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>  \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jqXHR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     \n               <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生错误：\"</span> <span class=\"token operator\">+</span> jqXHR<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n####The server-side code:\n```php\n<?php\nheader(\"Content-Type: text/plain;charset=utf-8\"); \n$staff = array\n    (\n        array(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n        array(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n        array(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n    );\n<p>if ($<em>SERVER[\"REQUEST</em>METHOD\"] == \"GET\") {\nsearch();\n} elseif ($<em>SERVER[\"REQUEST</em>METHOD\"] == \"POST\"){\ncreate();\n}</p>\n<p>function search(){\nif (!isset($<em>GET[\"number\"]) || empty($</em>GET[\"number\"])) {\necho \"参数错误\";\nreturn;\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">global $staff;\n$number = $_GET[&quot;number&quot;];\n$result = &quot;没有找到员工。&quot;;\n\n\nforeach ($staff as $value) {\n    if ($value[&quot;number&quot;] == $number) {\n        $result = &quot;找到员工：员工编号：&quot; . $value[&quot;number&quot;] . &quot;，员工姓名：&quot; . $value[&quot;name&quot;] . \n                          &quot;，员工性别：&quot; . $value[&quot;sex&quot;] . &quot;，员工职位：&quot; . $value[&quot;job&quot;];\n        break;\n    }\n}\necho $result;</code></pre></div>\n<p>}</p>\n<p>function create(){\nif (!isset($<em>POST[\"name\"]) || empty($</em>POST[\"name\"])\n|| !isset($<em>POST[\"number\"]) || empty($</em>POST[\"number\"])\n|| !isset($<em>POST[\"sex\"]) || empty($</em>POST[\"sex\"])\n|| !isset($<em>POST[\"job\"]) || empty($</em>POST[\"job\"])) {\necho \"参数错误，员工信息填写不全\";\nreturn;\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &quot;员工：&quot; . $_POST[&quot;name&quot;] . &quot; 信息保存成功！&quot;;</code></pre></div>\n<p>}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","id":"a6a3a108-9fa0-56ce-a1a0-9fc81f64bbee","excerpt":"AJAX( Asynchronous Javascript and XML), is a web development technique for creating interactive web application. In conventional web applications, it transmits information to and from the server using synchronous requests. It means that when you fill out a form and submit, you…","frontmatter":{"title":"An AJAX demo","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/12/17/ajax.html","date":"December 16, 2015","path":"/2015-12-17-ajax.html"}},{"html":"<p>Linter is a tool for identifying and reporting on whether the patterns or code adhere to certain style guidelines. Most of programming languages has linter, some compilers incorporate linting into the compilation process.</p>\n<p>JavaScript, being a dynamic and loosely-typed language, is especially prone to developer error. Because of the absence of compilation process, we typically find syntax or other errors in execution process.</p>\n<p>There are three major Linters for Javascript code: JSLint, JSHint, and ESLint. JSLint is the earliest Linter developed by Douglas Crockford. It has been defined as the exact patterns and styles as Douglas Crockford's.</p>\n<p>From my point of view, ESLint prevails among other Linters. First, it checkout your syntax and style at the same time. Besides, you can customize your own rules and styles. Furthermore, ESLint is a completely pluggable tool. It is available for many IDEs. When configuring and setting up the rules, you just need to create a \".eslintrc.json\" file in the root of your project directory and write down the rules you want to apply to. ESLint is written using Node.js to provide a fast runtime environment and easy installation via npm.</p>\n<p>In a nutshell, ESLint is a user-friendly tool. It helps you write neat and beautiful code.</p>\n<p>For more information, please refer to the links below:</p>\n<ul>\n<li><a href=\"http://eslint.org/\">ESLint official page</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/tool/lint.html\">A simple tutorial</a></li>\n</ul>","id":"207e1855-0498-52b7-ad12-852551b5e24d","excerpt":"Linter is a tool for identifying and reporting on whether the patterns or code adhere to certain style guidelines. Most of programming languages has linter, some compilers incorporate linting into the compilation process. JavaScript, being a dynamic and loosely-typed language, is…","frontmatter":{"title":"ESLint","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/12/24/eslint.html","date":"December 23, 2015","path":"/2015-12-24-eslint.html"}}],"nums":{"BOOTSTRAP":1,"LAYOUT":3,"MODAL":2,"GADGET":4,"HTML":2,"ICON":1,"FONT":1,"JQUERY":1,"CSS":3,"JS":7,"BLOG":1,"REACT":3,"GRAPHQL":1,"REACT-ROUTER":1,"React":1,"Angular":1},"year":2015,"years":[2021,2019,2018,2017,2016,2015],"tags":["Angular","BLOG","BOOTSTRAP","CSS","FONT","GADGET","GRAPHQL","HTML","ICON","JQUERY","JS","LAYOUT","MODAL","REACT","REACT-ROUTER","React"]}},"staticQueryHashes":[]}