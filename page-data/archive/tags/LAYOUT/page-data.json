{"componentChunkName":"component---src-templates-tags-js","path":"/archive/tags/LAYOUT","result":{"pageContext":{"posts":[{"html":"<p>I migrated my bootstrap blog to GitHub pages. Now I build my GitHub blog from cratch. I will try to perfect it. </p>","id":"9e2f857c-d065-57cd-8cd9-f07d5346ffd6","excerpt":"I migrated my bootstrap blog to GitHub pages. Now I build my GitHub blog from cratch. I will try to perfect it.","frontmatter":{"title":"Bootstrap","excerpt":null,"tags":["BOOTSTRAP","LAYOUT"]},"fields":{"slug":"/blog/2015/08/13/bootstrap.html","date":"August 12, 2015","path":"/2015-08-13-bootstrap.html"}},{"html":"<p>The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented.</p>\n<p>Most CSS solutions for Holy Grail aim to meet a few goals:</p>\n<ul>\n<li>They should have a fluid center with fixed-width sidebars.</li>\n<li>The center column(main content) should appear first in the HTML source.</li>\n<li>All columns should be the same height, regarless of which column is actually the tallest.</li>\n<li>They should require minimal markup.</li>\n<li>The footer should \"stick\"  to the bottom of the page when content is sparse.</li>\n</ul>\n<p>And one of the most classic templates is like this:</p>\n<h4>Holy Grails Layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pJMRgB\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pJMRgB/'>Classic Holy Grail</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<p>We can see that how <em>float:left</em> and <em>nagative margin-left</em> are used to let sidebars stick aside. Besides combining <em>padding-bottom: 999px, margin-bottom: -999px</em>, it is able to make the same height for all columns.However, it is not adaptive enough because the main content part need to be set a pair of fixed padding values.</p>\n<p>Then the Taobao UED create a more adaptive and advanced version of this classic layout.</p>\n<h4>Wings layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"BNXQMJ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/BNXQMJ/'>Wings Layout</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<br>\n<br>\n<br>\n<br>\n<h4>More info for Holy Grail layouts:</h4>\n<ul>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">Holy Grail Layout solved by Flexbox</a></li>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">A list of solutions</a></li>\n</ul>","id":"1c202194-c429-51e5-b76c-f4c6eedef83b","excerpt":"The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented. Most CSS solutions for Holy Grail aim to meet a few goals: They should have a fluid center with fixed…","frontmatter":{"title":"Holy Grail Layout","excerpt":null,"tags":["LAYOUT","HTML"]},"fields":{"slug":"/blog/2015/08/24/holy-grail-layout.html","date":"August 23, 2015","path":"/2015-08-24-holy-grail-layout.html"}},{"html":"<p>Recently I am asked to create a tab bar which is supposed to work like the one on Chrome browser. To be more specific, when the tabs don't take up the full width, they have a fixed size. When the total width of the tabs is over the the bound of the tab bar, the tabs should shrink and divide the bar space evenly.</p>\n<p>I tried out several solutions, most of them just got the tab bar overflowed or increased the width of the tab bar. Eventually, my hunch was telling me that this was a best use case of using flex-box layout. I knew flex-box quite a while and made use of it in many situations. However, <em>justify-content</em>, <em>align-items</em>, and <em>flex-direction</em> are three properties I used most. I realized that there were some other properties that I thought I knew, but I actually didn't understand how to take a full advantage of them. They are <em>flex-grow</em>, <em>flex-shrink</em>, and <em>flex-basis</em>. And the most tricky one is <em>flex-basis</em>. It defines the default size of an element before the remaining space is distributed. Its default value is 'auto' which means it looks at the width and height property. It's worth noting that the container component should have an indicative size before these three flex rules kick in.</p>\n<p>First, we give a fixed width to tab container and apply flex layout to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-start<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #acacac<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For tabs, <em>flex-grow</em> is set to 0 which means its size is based off the <em>flex-basis</em> when there are remaining space in the container. On the other hand,\n<em>flex-shrink</em> is 1 which means the tabs are distributed evenly based on the width of the container if the container is out of empty space.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.tab</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #a00<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Viola! Now we have a tab bar just works like any others. Here is a demo you can play around with.</p>\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"flexbox-tabs\" src=\"//codepen.io/dontry018/embed/WPLPYv/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dontry018/pen/WPLPYv/'>flexbox-tabs</a> by loconomo\n  (<a href='https://codepen.io/dontry018'>@dontry018</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","id":"80ba7cbe-8977-5d12-a52c-c1144bb9256e","excerpt":"Recently I am asked to create a tab bar which is supposed to work like the one on Chrome browser. To be more specific, when the tabs don't take up the full width, they have a fixed size. When the total width of the tabs is over the the bound of the tab bar, the tabs should shrink…","frontmatter":{"title":"Create a tab bar with flex-box layout","excerpt":"Let's use flex-box layout to create a tab bar","tags":["CSS","LAYOUT"]},"fields":{"slug":"/blog/2019/01/31/flex-box.html","date":"January 30, 2019","path":"/2019-01-31-flex-box.html"}}],"nums":{"MODAL":2,"BOOTSTRAP":1,"LAYOUT":3,"GADGET":4,"ICON":1,"FONT":1,"JQUERY":1,"HTML":2,"CSS":3,"JS":7,"BLOG":1,"REACT":3,"GRAPHQL":1,"Angular":1,"REACT-ROUTER":1,"React":1},"tag":"LAYOUT","years":[2021,2019,2018,2017,2016,2015],"tags":["Angular","BLOG","BOOTSTRAP","CSS","FONT","GADGET","GRAPHQL","HTML","ICON","JQUERY","JS","LAYOUT","MODAL","REACT","REACT-ROUTER","React"]}},"staticQueryHashes":[]}