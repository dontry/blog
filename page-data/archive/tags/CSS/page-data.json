{"componentChunkName":"component---src-templates-tags-js","path":"/archive/tags/CSS","result":{"pageContext":{"posts":[{"html":"<p>I created a button style with some fancy effects. It only depends on HTML + CSS. It shows the power of CSS transform and transition properties. However the CSS code is somehow redundant and prolix. I am going to learn a CSS preprocessor like SCSS to improve efficiency.</p>\n<h4>Ghost Button</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pjoRWQ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pjoRWQ/'>Ghost Button</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","id":"4df17781-6697-5114-982c-48eb8b21c917","excerpt":"I created a button style with some fancy effects. It only depends on HTML + CSS. It shows the power of CSS transform and transition properties. However the CSS code is somehow redundant and prolix. I am going to learn a CSS preprocessor like SCSS to improve efficiency. Ghost…","frontmatter":{"title":"Ghost Button","excerpt":null,"tags":["GADGET","CSS"]},"fields":{"slug":"/blog/2015/09/01/ghost-button.html","date":"August 31, 2015","path":"/2015-09-01-ghost-button.html"}},{"html":"<p> Recently I got a job as a front-end developer. It's very interesting and exciting. But working in a group is different from working individually. Currently, we are working on a project of developing an online course platform. It's a big project. The programs are intricate and complex. Thus it's very crucial for us to write readable, flexible and maintainable code. This is so true especially for front-end developers Because you work across different languages: html, css, javascript. If you don't write consistently with certain code style, it will be a nightmare as the project grows bigger.  Therefore, a code guide is essential. Here are some code／style guide:</p>\n<ul>\n<li><a href=\"http://alloyteam.github.io/CodeGuide/\">Code guide from QQ alloyteam</a></li>\n<li><a href=\"http://nec.netease.com/standard\">NEC style guide from Netease</a></li>\n<li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/\">Style guide from zhibimo</a></li>\n</ul>","id":"6210a7a0-53c7-5c5f-b630-12bbfb84210d","excerpt":"Recently I got a job as a front-end developer. It's very interesting and exciting. But working in a group is different from working individually. Currently, we are working on a project of developing an online course platform. It's a big project. The programs are intricate and…","frontmatter":{"title":"Code Guide","excerpt":null,"tags":["HTML","CSS"]},"fields":{"slug":"/blog/2016/03/05/code-guide.html","date":"March 04, 2016","path":"/2016-03-05-code-guide.html"}},{"html":"<p>Recently I am asked to create a tab bar which is supposed to work like the one on Chrome browser. To be more specific, when the tabs don't take up the full width, they have a fixed size. When the total width of the tabs is over the the bound of the tab bar, the tabs should shrink and divide the bar space evenly.</p>\n<p>I tried out several solutions, most of them just got the tab bar overflowed or increased the width of the tab bar. Eventually, my hunch was telling me that this was a best use case of using flex-box layout. I knew flex-box quite a while and made use of it in many situations. However, <em>justify-content</em>, <em>align-items</em>, and <em>flex-direction</em> are three properties I used most. I realized that there were some other properties that I thought I knew, but I actually didn't understand how to take a full advantage of them. They are <em>flex-grow</em>, <em>flex-shrink</em>, and <em>flex-basis</em>. And the most tricky one is <em>flex-basis</em>. It defines the default size of an element before the remaining space is distributed. Its default value is 'auto' which means it looks at the width and height property. It's worth noting that the container component should have an indicative size before these three flex rules kick in.</p>\n<p>First, we give a fixed width to tab container and apply flex layout to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-start<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #acacac<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For tabs, <em>flex-grow</em> is set to 0 which means its size is based off the <em>flex-basis</em> when there are remaining space in the container. On the other hand,\n<em>flex-shrink</em> is 1 which means the tabs are distributed evenly based on the width of the container if the container is out of empty space.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.tab</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #a00<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Viola! Now we have a tab bar just works like any others. Here is a demo you can play around with.</p>\n<iframe height=\"365\" style=\"width: 100%;\" scrolling=\"no\" title=\"flexbox-tabs\" src=\"//codepen.io/dontry018/embed/WPLPYv/?height=265&theme-id=0&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dontry018/pen/WPLPYv/'>flexbox-tabs</a> by loconomo\n  (<a href='https://codepen.io/dontry018'>@dontry018</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","id":"80ba7cbe-8977-5d12-a52c-c1144bb9256e","excerpt":"Recently I am asked to create a tab bar which is supposed to work like the one on Chrome browser. To be more specific, when the tabs don't take up the full width, they have a fixed size. When the total width of the tabs is over the the bound of the tab bar, the tabs should shrink…","frontmatter":{"title":"Create a tab bar with flex-box layout","excerpt":"Let's use flex-box layout to create a tab bar","tags":["CSS","LAYOUT"]},"fields":{"slug":"/blog/2019/01/31/flex-box.html","date":"January 30, 2019","path":"/2019-01-31-flex-box.html"}}],"nums":{"BOOTSTRAP":1,"LAYOUT":3,"MODAL":2,"GADGET":4,"CSS":3,"ICON":1,"FONT":1,"JS":7,"JQUERY":1,"HTML":2,"REACT-ROUTER":1,"REACT":3,"BLOG":1,"GRAPHQL":1,"React":1,"Angular":1},"tag":"CSS","years":[2021,2019,2018,2017,2016,2015],"tags":["Angular","BLOG","BOOTSTRAP","CSS","FONT","GADGET","GRAPHQL","HTML","ICON","JQUERY","JS","LAYOUT","MODAL","REACT","REACT-ROUTER","React"]}},"staticQueryHashes":[]}