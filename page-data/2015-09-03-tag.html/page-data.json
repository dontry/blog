{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-03-tag.html","result":{"data":{"markdownRemark":{"html":"<p>Because Jekyll doesn't fully support tagging feature. I learned how to feature tags into my blogs. I found  several ways. Fianlly I made it work by following the guides given by <a href=\"http://www.minddust.com/post/tags-and-categories-on-github-pages/\">MIDDUST</a>. This method need no plugin but you have to  generate a separate page everytime you create a new tag.  So it's like a work-around method.</p>\n<p>Here are other methods may help:</p>\n<ul>\n<li><a href=\"http://charliepark.org/tags-in-jekyll/\">Tags In Jekyll by Charlie Park(using Rugy plugin)</a></li>\n<li><a href=\"An%20easy%20way%20to%20support%20tags%20in%20a%20jekyll%20blog\">A method similar to MIDDUST</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000000406017\">A method using JSON</a></li>\n</ul>","frontmatter":{"title":"Creating Tags","tags":["GADGET"],"excerpt":null},"fields":{"date":"September 02, 2015","path":"/2015-09-03-tag.html","slug":"/blog/2015/09/03/tag.html"}}},"pageContext":{"title":"Creating Tags","slug":"/blog/2015/09/03/tag.html","prev":{"html":"<p>I created a button style with some fancy effects. It only depends on HTML + CSS. It shows the power of CSS transform and transition properties. However the CSS code is somehow redundant and prolix. I am going to learn a CSS preprocessor like SCSS to improve efficiency.</p>\n<h4>Ghost Button</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pjoRWQ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pjoRWQ/'>Ghost Button</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","id":"4df17781-6697-5114-982c-48eb8b21c917","excerpt":"I created a button style with some fancy effects. It only depends on HTML + CSS. It shows the power of CSS transform and transition properties. However the CSS code is somehow redundant and prolix. I am going to learn a CSS preprocessor like SCSS to improve efficiency. Ghost…","frontmatter":{"title":"Ghost Button","excerpt":null,"tags":["GADGET","CSS"]},"fields":{"slug":"/blog/2015/09/01/ghost-button.html","date":"August 31, 2015","path":"/2015-09-01-ghost-button.html"}},"next":{"html":"<p>The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented.</p>\n<p>Most CSS solutions for Holy Grail aim to meet a few goals:</p>\n<ul>\n<li>They should have a fluid center with fixed-width sidebars.</li>\n<li>The center column(main content) should appear first in the HTML source.</li>\n<li>All columns should be the same height, regarless of which column is actually the tallest.</li>\n<li>They should require minimal markup.</li>\n<li>The footer should \"stick\"  to the bottom of the page when content is sparse.</li>\n</ul>\n<p>And one of the most classic templates is like this:</p>\n<h4>Holy Grails Layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"pJMRgB\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/pJMRgB/'>Classic Holy Grail</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<p>We can see that how <em>float:left</em> and <em>nagative margin-left</em> are used to let sidebars stick aside. Besides combining <em>padding-bottom: 999px, margin-bottom: -999px</em>, it is able to make the same height for all columns.However, it is not adaptive enough because the main content part need to be set a pair of fixed padding values.</p>\n<p>Then the Taobao UED create a more adaptive and advanced version of this classic layout.</p>\n<h4>Wings layout</h4>\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"BNXQMJ\" data-default-tab=\"result\" data-user=\"dontry018\" class='codepen'>See the Pen <a href='http://codepen.io/dontry018/pen/BNXQMJ/'>Wings Layout</a> by loconomo (<a href='http://codepen.io/dontry018'>@dontry018</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<br>\n<br>\n<br>\n<br>\n<h4>More info for Holy Grail layouts:</h4>\n<ul>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">Holy Grail Layout solved by Flexbox</a></li>\n<li><a href=\"https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/\">A list of solutions</a></li>\n</ul>","id":"1c202194-c429-51e5-b76c-f4c6eedef83b","excerpt":"The Holy Grail Layout is a classic CSS problem with various solutions presented over time. Many people are searching for the best method and several goot templates are presented. Most CSS solutions for Holy Grail aim to meet a few goals: They should have a fluid center with fixed…","frontmatter":{"title":"Holy Grail Layout","excerpt":null,"tags":["LAYOUT","HTML"]},"fields":{"slug":"/blog/2015/08/24/holy-grail-layout.html","date":"August 23, 2015","path":"/2015-08-24-holy-grail-layout.html"}}}},"staticQueryHashes":[]}