{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-18-closure.html","result":{"data":{"markdownRemark":{"html":"<p> Before talking about closure, let's start with scope first. <em>Scope</em> is\na programming language controls the visibility and lifetimes of variables and parameters. Most languages have block scope, which means that a block of statements wrapped with curly braces  are not visible from outside of the block. </p>\n<p> However JavaScript does not have block scope even though its block syntax suggests that it does. JavaScript does have function scope. It means that a variable defined within a function is visible everywhere within the function.\nThe closure feature is derived from function scope service. It enjoys the privilege of access to the outer value variable.</p>\n<p>Typically, closure can be used to give each handler a unique number.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add_the_handlers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this snippet, it defines a  function and immediately invoke it, passing in i. That function will return an event handler function that is bound to the value of i that was passed in.</p>\n<p>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\nIt is worth noticing that in JavaScript, the inner function can have a longer lifetime than its outer function.\n=======\nIt is worth noticing that in JavaScript, the inner function can have a longer lifetim than its outer funciton.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>origin/master</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Instead of initializing myObject with an object literal, we will initialize myObject by calling a function that returns an object literal.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                value <span class=\"token operator\">+=</span> <span class=\"token keyword\">typeof</span> inc <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> inc <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">getValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><b>We are not assigning a function to myObject. We are assigning the result of invoking that function.</b> Notice the () on the last line. The function returns an object containing two methods, and those methods continue to enjoy the privilege of access to the value variable.</p>","frontmatter":{"title":"Closure (JS the good parts)","tags":["JS"],"excerpt":null},"fields":{"date":"September 17, 2015","path":"/2015-09-18-closure.html","slug":"/blog/2015/09/18/closure.html"}}},"pageContext":{"title":"Closure (JS the good parts)","slug":"/blog/2015/09/18/closure.html","prev":{"html":"<p>JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Morever, we can augment a specific type with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Number<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'integer'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'ceiling'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'floor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This method helps us convert a Number type to integer.</p>","id":"c68d6941-e9c8-5f2c-a6d8-ac9b4d650ddf","excerpt":"JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this: Morever, we can augment a specific type with a new method like this…","frontmatter":{"title":"Augmenting types (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/16/augment-type.html","date":"September 15, 2015","path":"/2015-09-16-augment-type.html"}},"next":{"html":"<p>Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google search API. However, because of the goddamn GFW, it is invalid to use. So I resorted to other plausible ways. Here are three major solutions may work:</p>\n<ol>\n<li>\n<p><strong>JavaScript and JSON technique</strong></p>\n<ul>\n<li><a href=\"https://alexpearce.me/2012/04/simple-jekyll-searching/\">Simple Jekyll Searching by Alex Pearce</a>This solution is lack of full-text search feature.)</li>\n<li><a href=\"https://github.com/christian-fei/Simple-Jekyll-Search\">Simple-Jekyll-Search by christian-fei</a> A JavaScript library to add search functionality to any Jekyll blog.</li>\n<li><a href=\"http://kingauthur.info/2012/12/03/the-things-about-jekyll/\">Add static searching to Jekyll</a> </li>\n</ul>\n</li>\n<li><strong><a href=\"https://github.com/slashdotdash/jekyll-lunr-js-search\">lunr.js and Ruby Gem plugins</a> </strong></li>\n<li><strong><a href=\"https://swiftype.com/site-search\">A powerful third party search engine</a> It is a hosted and easy-deploy search solution.</strong></li>\n</ol>\n<p>Finally I adopted the third solution. It's very easy to deploy. You just need to follow instruction to set it up. Someday later I would like to try other two methods.</p>","id":"6341acb1-c251-5aab-bdd9-9b09c7059d31","excerpt":"Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google…","frontmatter":{"title":"Search Bar","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/04/searching.html","date":"September 03, 2015","path":"/2015-09-04-searching.html"}}}},"staticQueryHashes":[]}