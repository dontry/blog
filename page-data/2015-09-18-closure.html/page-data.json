{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-18-closure.html","result":{"data":{"markdownRemark":{"html":"<p> Before talking about closure, let's start with scope first. <em>Scope</em> is\na programming language controls the visibility and lifetimes of variables and parameters. Most languages have block scope, which means that a block of statements wrapped with curly braces  are not visible from outside of the block. </p>\n<p> However JavaScript does not have block scope even though its block syntax suggests that it does. JavaScript does have function scope. It means that a variable defined within a function is visible everywhere within the function.\nThe closure feature is derived from function scope service. It enjoys the privilege of access to the outer value variable.</p>\n<p>Typically, closure can be used to give each handler a unique number.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add_the_handlers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nodes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this snippet, it defines a  function and immediately invoke it, passing in i. That function will return an event handler function that is bound to the value of i that was passed in.</p>\n<p>&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\nIt is worth noticing that in JavaScript, the inner function can have a longer lifetime than its outer function.\n=======\nIt is worth noticing that in JavaScript, the inner function can have a longer lifetim than its outer funciton.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>origin/master</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Instead of initializing myObject with an object literal, we will initialize myObject by calling a function that returns an object literal.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                value <span class=\"token operator\">+=</span> <span class=\"token keyword\">typeof</span> inc <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> inc <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">getValue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><b>We are not assigning a function to myObject. We are assigning the result of invoking that function.</b> Notice the () on the last line. The function returns an object containing two methods, and those methods continue to enjoy the privilege of access to the value variable.</p>","frontmatter":{"title":"Closure (JS the good parts)","tags":["JS"],"excerpt":null},"fields":{"date":"September 17, 2015","path":"/2015-09-18-closure.html","slug":"/blog/2015/09/18/closure.html"}}},"pageContext":{"id":"478bf3a7-91f4-53cf-a323-5e79778bd47f","prev":{"id":"953f73f4-2dec-58bc-8599-5b6101b3ba88","frontmatter":{"title":"Global Variables (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"path":"/2015-09-14-global-variables.html"}},"next":{"id":"6341acb1-c251-5aab-bdd9-9b09c7059d31","frontmatter":{"title":"Search Bar","excerpt":null,"tags":null},"fields":{"path":"/2015-09-04-searching.html"}}}},"staticQueryHashes":[]}