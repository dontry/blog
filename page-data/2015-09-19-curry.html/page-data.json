{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-19-curry.html","result":{"data":{"markdownRemark":{"html":"<p>Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Function<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'curry'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> add1 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 7</span></code></pre></div>\n<p>The curry method works by creating a closure that holds that original function and the arguments to curry. It returns a function that, when invoked, returns the result of calling that original function, passing it all of the arguments from the invocation of curry and the current invocation. It uses the Array concat method to concatenate the two arrays of arguments together.</p>","frontmatter":{"title":"Curry","tags":null,"excerpt":null},"fields":{"date":"September 18, 2015","path":"/2015-09-19-curry.html","slug":"/blog/2015/09/19/curry.html"}}},"pageContext":{"id":"bdb2849f-c688-57ee-9b55-d246e860996e","prev":{"id":"c68d6941-e9c8-5f2c-a6d8-ac9b4d650ddf","frontmatter":{"title":"Augmenting types (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"path":"/2015-09-16-augment-type.html"}},"next":{"id":"4df17781-6697-5114-982c-48eb8b21c917","frontmatter":{"title":"Ghost Button","excerpt":null,"tags":["GADGET","CSS"]},"fields":{"path":"/2015-09-01-ghost-button.html"}}}},"staticQueryHashes":[]}