{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-06-11-connect-ngrx-store.html","result":{"data":{"markdownRemark":{"html":"<p>As shown in the <a href=\"https://NgRx.io/guide/store#tutorial\">NgRx documentation example</a>, in order to access the NgRx state, we have to create an observable and assign a selector to it. Due to the nature of observable, <em>async pipe</em> is required to apply to the observable in the HTML template. This is quite cumbersome in general. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCounterComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> count$<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> store<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Current Count: {{ count$ | async }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In a bid to turning the observable into regular variable. We can assign the state to a variable in the subscription.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCounterComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> count<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> count$<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> countSubscription<span class=\"token operator\">:</span> Subscription<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> store<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count$ <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countSubscription <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">ngOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, the above code doesn't look very nice. Once the component has a few more selectors, it could easily become a mess. </p>\n<p>Can we come up with an approach so that we can connect the NgRx state with ease? Yes, we can! </p>\n<p>We create a <code class=\"language-text\">AbstractConnectableComponent</code> to automate the observable subscription steps.  This improved approach does not need to create the observable properties. The connectable component iterates through the connected properties and assigns the selected NgRx state to them. It is easy to unsubscribe the observables too. Once the observable <code class=\"language-text\">destroy$</code> emits in <code class=\"language-text\">ngOnDestroy()</code> lifecycle hook, the subscriptions will be destroyed. Plus, since these connected public properties are just regular variables, we don't need the <em>async pipe</em> in the HTML template any more. All in all, this is a clever approach to connect NgRx store just with a little bit abstraction.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCounterComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractConnectableComponent</span>  <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> count<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> store<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connect<span class=\"token operator\">&lt;</span>MyCounterComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> template<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractConnectableComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnDestroy</span> <span class=\"token punctuation\">{</span>\n\n <span class=\"token keyword\">protected</span> destroy$<span class=\"token operator\">:</span> Subject<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">public</span> <span class=\"token function\">ngOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroy$<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">protected</span> connect<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractConnectableComponent</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ConnectableData<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span> \n   Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value$<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     value$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n       <span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destroy$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cdr<span class=\"token punctuation\">.</span><span class=\"token function\">detectChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"A better way to connect to NgRx store","tags":["ANGULAR","NGRX"],"excerpt":"The state from NgRx store is an observable stream. It is a little bit tricky to access it. This post provides a better way to handle it. "},"fields":{"date":"June 10, 2021","path":"/2021-06-11-connect-ngrx-store.html","slug":"/blog/2021/06/11/connect-ngrx-store.html"}}},"pageContext":{"id":"4750038c-b728-5a5c-9d86-e83fad211822","prev":{"id":"f45c2c06-4fee-54db-a32a-520347ac8cee","frontmatter":{"title":"Angular ControlContainer","excerpt":"ControlContainer solves the issue how the parent form accesses or controls and child form when they reside in different components. ","tags":["ANGULAR"]},"fields":{"path":"/2021-06-02-control-container.html"}},"next":{"id":"085210a8-9c9f-560a-b0bd-b517dc28dea3","frontmatter":{"title":"React - Basic Theoretical Concepts","excerpt":null,"tags":["REACT"]},"fields":{"path":"/2017-12-08-react-basic-theoretical-concepts.html"}}}},"staticQueryHashes":[]}