{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016-11-5-augmenting-typs.html","result":{"data":{"markdownRemark":{"html":"<p>JavaScript allows us make new method available to a specific type.\nFor example, we can augment Function.prototype with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    Function.prototype.method = function(name, func){\n        this.prototype[name] = func;\n        return this;\n    };</code></pre></div>\n<p>Morever, we can augment a specific type with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    Number.method(&#39;integer&#39;, function(){\n        return Math[this &lt; 0 ? &#39;ceiling&#39; : &#39;floor&#39;](this);\n        });\n\n    document.writeln((-10/3).integer())</code></pre></div>\n<p>This method help us convert a Number type to integer.</p>","frontmatter":{"title":"Augmenting types","tags":null,"excerpt":null},"fields":{"date":"November 04, 2016","path":"/2016-11-5-augmenting-typs.html","slug":"/blog/2016/11/5/augmenting-typs.html"}}},"pageContext":{"title":"Augmenting types","slug":"/blog/2016/11/5/augmenting-typs.html","prev":{"html":"<p>Gatsby is a blazing-fast static site generator for React.</p>\n<h2>gatsby-config.js</h2>\n<p>Site configuration options for a Gatsby site are placed in a file at the root of the project folder called gatsby-config.js.</p>\n<p>It is usually used to set up siteMetadata and plugins. There are some commonly used plugins. <a href=\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/\"><strong>gatsby-source-filesystem</strong></a> -- A Gatsby source plugin for sourcing data into your Gatsby application from your local filesystem. <a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark\"><strong>gatsby-transformer-remark</strong></a> -- a plugin parses Markdown files using <strong>Remark</strong>.</p>\n<h2>gatsby-node.js</h2>\n<p>We can make use of <a href=\"https://www.gatsbyjs.org/docs/node-apis/\"><strong>Gatsby node API</strong></a> in the <strong>gatsby-node.js</strong> file. Two most common use case are creating custom pages driven by GraphQL data and adding new nodes or fields to GraphQL.</p>","id":"65cfb82e-6343-55e6-890d-24951fb2f1cf","excerpt":"Gatsby is a blazing-fast static site generator for React. gatsby-config.js Site configuration options for a Gatsby site are placed in a file at the root of the project folder called gatsby-config.js. It is usually used to set up siteMetadata and plugins. There are some commonly…","frontmatter":{"title":"Migration to Gatsby","excerpt":"Gatsby is a blazing-fast static site generator for React.","tags":["BLOG","REACT","GRAPHQL"]},"fields":{"slug":"/blog/2018/6/20/gatsby.html","date":"June 19, 2018","path":"/2018-6-20-gatsby.html"}},"next":{"html":"<p>Linter is a tool for identifying and reporting on whether the patterns or code adhere to certain style guidelines. Most of programming languages has linter, some compilers incorporate linting into the compilation process.</p>\n<p>JavaScript, being a dynamic and loosely-typed language, is especially prone to developer error. Because of the absence of compilation process, we typically find syntax or other errors in execution process.</p>\n<p>There are three major Linters for Javascript code: JSLint, JSHint, and ESLint. JSLint is the earliest Linter developed by Douglas Crockford. It has been defined as the exact patterns and styles as Douglas Crockford's.</p>\n<p>From my point of view, ESLint prevails among other Linters. First, it checkout your syntax and style at the same time. Besides, you can customize your own rules and styles. Furthermore, ESLint is a completely pluggable tool. It is available for many IDEs. When configuring and setting up the rules, you just need to create a \".eslintrc.json\" file in the root of your project directory and write down the rules you want to apply to. ESLint is written using Node.js to provide a fast runtime environment and easy installation via npm.</p>\n<p>In a nutshell, ESLint is a user-friendly tool. It helps you write neat and beautiful code.</p>\n<p>For more information, please refer to the links below:</p>\n<ul>\n<li><a href=\"http://eslint.org/\">ESLint official page</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/tool/lint.html\">A simple tutorial</a></li>\n</ul>","id":"207e1855-0498-52b7-ad12-852551b5e24d","excerpt":"Linter is a tool for identifying and reporting on whether the patterns or code adhere to certain style guidelines. Most of programming languages has linter, some compilers incorporate linting into the compilation process. JavaScript, being a dynamic and loosely-typed language, is…","frontmatter":{"title":"ESLint","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/12/24/eslint.html","date":"December 23, 2015","path":"/2015-12-24-eslint.html"}}}},"staticQueryHashes":[]}