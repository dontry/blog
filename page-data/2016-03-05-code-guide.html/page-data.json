{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016-03-05-code-guide.html","result":{"data":{"markdownRemark":{"html":"<p> Recently I got a job as a front-end developer. It's very interesting and exciting. But working in a group is different from working individually. Currently, we are working on a project of developing an online course platform. It's a big project. The programs are intricate and complex. Thus it's very crucial for us to write readable, flexible and maintainable code. This is so true especially for front-end developers Because you work across different languages: html, css, javascript. If you don't write consistently with certain code style, it will be a nightmare as the project grows bigger.  Therefore, a code guide is essential. Here are some code／style guide:</p>\n<ul>\n<li><a href=\"http://alloyteam.github.io/CodeGuide/\">Code guide from QQ alloyteam</a></li>\n<li><a href=\"http://nec.netease.com/standard\">NEC style guide from Netease</a></li>\n<li><a href=\"http://zhibimo.com/read/Ashu/front-end-style-guide/\">Style guide from zhibimo</a></li>\n</ul>","frontmatter":{"title":"Code Guide","tags":["HTML","CSS"],"excerpt":null},"fields":{"date":"March 04, 2016","path":"/2016-03-05-code-guide.html","slug":"/blog/2016/03/05/code-guide.html"}}},"pageContext":{"title":"Code Guide","slug":"/blog/2016/03/05/code-guide.html","prev":{"html":"<p>A module is a function or object that presents an interface but that hides its state and implementation. The module pattern takes advantage of function scope and closure to create relationships that are binding and private.</p>\n<p>The general pattern of a module is a function that defines private variables and functions; creates privileged functions which, through closure, will have access to the private variables and functions; and that returns the privileged functions or stores them in an accessible place. For example, if we want to make an object that produces a serial number:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">serial_maker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> prefix <span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> seq <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">set_prefix</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                prefix <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">set_seq</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                seq <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">gensym</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> seq<span class=\"token punctuation\">;</span>\n                seq <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> seqer <span class=\"token operator\">=</span> <span class=\"token function\">serial_maker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seqer<span class=\"token punctuation\">.</span>set_prefix <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    seqer<span class=\"token punctuation\">.</span>set_seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> unique <span class=\"token operator\">=</span> seqer<span class=\"token punctuation\">.</span><span class=\"token function\">gensym</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unique is \"Q1000\"</span></code></pre></div>\n<p>The methods do not make use of this or that. As a result, there is no way to compromise the seqer. It isn’t possible to get or change the prefix or seq except as permitted by the methods. The seqer object is mutable, so the methods could be replaced, but that still does not give access to its secrets. seqer is simply a collection of functions, and those functions are capabilities that grant specific powers to use or modify the secret state.</p>","id":"ff7ff895-3101-5f52-b0ed-617f8df57a99","excerpt":"A module is a function or object that presents an interface but that hides its state and implementation. The module pattern takes advantage of function scope and closure to create relationships that are binding and private. The general pattern of a module is a function that…","frontmatter":{"title":"Module (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/21/module.html","date":"September 20, 2015","path":"/2015-09-21-module.html"}},"next":{"html":"<p>Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Function<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'curry'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> add1 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 7</span></code></pre></div>\n<p>The curry method works by creating a closure that holds that original function and the arguments to curry. It returns a function that, when invoked, returns the result of calling that original function, passing it all of the arguments from the invocation of curry and the current invocation. It uses the Array concat method to concatenate the two arrays of arguments together.</p>","id":"bdb2849f-c688-57ee-9b55-d246e860996e","excerpt":"Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype. The curry method works by creating a closure…","frontmatter":{"title":"Curry","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/19/curry.html","date":"September 18, 2015","path":"/2015-09-19-curry.html"}}}},"staticQueryHashes":[]}