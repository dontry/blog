{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-04-searching.html","result":{"data":{"markdownRemark":{"html":"<p>Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google search API. However, because of the goddamn GFW, it is invalid to use. So I resorted to other plausible ways. Here are three major solutions may work:</p>\n<ol>\n<li>\n<p><strong>JavaScript and JSON technique</strong></p>\n<ul>\n<li><a href=\"https://alexpearce.me/2012/04/simple-jekyll-searching/\">Simple Jekyll Searching by Alex Pearce</a>This solution is lack of full-text search feature.)</li>\n<li><a href=\"https://github.com/christian-fei/Simple-Jekyll-Search\">Simple-Jekyll-Search by christian-fei</a> A JavaScript library to add search functionality to any Jekyll blog.</li>\n<li><a href=\"http://kingauthur.info/2012/12/03/the-things-about-jekyll/\">Add static searching to Jekyll</a> </li>\n</ul>\n</li>\n<li><strong><a href=\"https://github.com/slashdotdash/jekyll-lunr-js-search\">lunr.js and Ruby Gem plugins</a> </strong></li>\n<li><strong><a href=\"https://swiftype.com/site-search\">A powerful third party search engine</a> It is a hosted and easy-deploy search solution.</strong></li>\n</ol>\n<p>Finally I adopted the third solution. It's very easy to deploy. You just need to follow instruction to set it up. Someday later I would like to try other two methods.</p>","frontmatter":{"title":"Search Bar","tags":null,"excerpt":null},"fields":{"date":"September 03, 2015","path":"/2015-09-04-searching.html","slug":"/blog/2015/09/04/searching.html"}}},"pageContext":{"title":"Search Bar","slug":"/blog/2015/09/04/searching.html","prev":{"html":"<p>JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Morever, we can augment a specific type with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Number<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'integer'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'ceiling'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'floor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This method helps us convert a Number type to integer.</p>","id":"c68d6941-e9c8-5f2c-a6d8-ac9b4d650ddf","excerpt":"JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this: Morever, we can augment a specific type with a new method like this…","frontmatter":{"title":"Augmenting types (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/16/augment-type.html","date":"September 15, 2015","path":"/2015-09-16-augment-type.html"}},"next":{"html":"<blockquote>\n<p>From today on, I will write down some notes about the book <em>JavaScript The Good Parts</em>.</p>\n</blockquote>\n<p>Global variables are horrible in JavaScript. If you don't use them wisely, they will lurk in your code until break down your application. Because when your unconciously create a local variable with the same name of the global variables, terrible things will happen. So in many cases, global variables should be avoided.</p>\n<p>One way to minimize the use of global variables it to create a single global variable container.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">MYAPP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>stooge <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token string\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joe\"</span>\n    <span class=\"token string\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Howard\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>flight <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nairline<span class=\"token operator\">:</span> <span class=\"token string\">\"Oceanic\"</span><span class=\"token punctuation\">,</span>\nnumber<span class=\"token operator\">:</span> <span class=\"token number\">815</span><span class=\"token punctuation\">,</span>\ndeparture<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">IATA</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SYD\"</span><span class=\"token punctuation\">,</span>\n    time<span class=\"token operator\">:</span> <span class=\"token string\">\"2004-09-22\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Sydney\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\narrival<span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">IATA</span><span class=\"token operator\">:</span> <span class=\"token string\">\"LAX\"</span><span class=\"token punctuation\">,</span>\n    time<span class=\"token operator\">:</span> <span class=\"token string\">\"2004-09-23\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Los Angeles\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By including your global footprint into a single name, it is significantly reducing the chance of bad interaction with other modules. And it is more readable, since MYAPP is like a namespace referring to its application.</p>","id":"953f73f4-2dec-58bc-8599-5b6101b3ba88","excerpt":"From today on, I will write down some notes about the book JavaScript The Good Parts. Global variables are horrible in JavaScript. If you don't use them wisely, they will lurk in your code until break down your application. Because when your unconciously create a local variable…","frontmatter":{"title":"Global Variables (JS the good parts)","excerpt":null,"tags":["JS"]},"fields":{"slug":"/blog/2015/09/14/global-variables.html","date":"September 13, 2015","path":"/2015-09-14-global-variables.html"}}}},"staticQueryHashes":[]}