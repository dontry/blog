{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-09-16-augment-type.html","result":{"data":{"markdownRemark":{"html":"<p>JavaScript allows us make new method available to the basic type lick arrays, strings, numbers, regular expressions, strings, functions.\nFor example, we can augment Function.prototype with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Morever, we can augment a specific type with a new method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Number<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'integer'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'ceiling'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'floor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This method helps us convert a Number type to integer.</p>","frontmatter":{"title":"Augmenting types (JS the good parts)","tags":["JS"],"excerpt":null},"fields":{"date":"September 15, 2015","path":"/2015-09-16-augment-type.html","slug":"/blog/2015/09/16/augment-type.html"}}},"pageContext":{"title":"Augmenting types (JS the good parts)","slug":"/blog/2015/09/16/augment-type.html","prev":{"html":"<p>Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    Function<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'curry'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">,</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">that</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> add1 <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 7</span></code></pre></div>\n<p>The curry method works by creating a closure that holds that original function and the arguments to curry. It returns a function that, when invoked, returns the result of calling that original function, passing it all of the arguments from the invocation of curry and the current invocation. It uses the Array concat method to concatenate the two arrays of arguments together.</p>","id":"bdb2849f-c688-57ee-9b55-d246e860996e","excerpt":"Currying is a good way to process multiple arguments flexibly. It allows us to produce a new function by combining a function and an argument:\nJavaScript does not have a curry method, we can fix that by augmenting Funcion.prototype. The curry method works by creating a closure…","frontmatter":{"title":"Curry","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/19/curry.html","date":"September 18, 2015","path":"/2015-09-19-curry.html"}},"next":{"html":"<p>Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google search API. However, because of the goddamn GFW, it is invalid to use. So I resorted to other plausible ways. Here are three major solutions may work:</p>\n<ol>\n<li>\n<p><strong>JavaScript and JSON technique</strong></p>\n<ul>\n<li><a href=\"https://alexpearce.me/2012/04/simple-jekyll-searching/\">Simple Jekyll Searching by Alex Pearce</a>This solution is lack of full-text search feature.)</li>\n<li><a href=\"https://github.com/christian-fei/Simple-Jekyll-Search\">Simple-Jekyll-Search by christian-fei</a> A JavaScript library to add search functionality to any Jekyll blog.</li>\n<li><a href=\"http://kingauthur.info/2012/12/03/the-things-about-jekyll/\">Add static searching to Jekyll</a> </li>\n</ul>\n</li>\n<li><strong><a href=\"https://github.com/slashdotdash/jekyll-lunr-js-search\">lunr.js and Ruby Gem plugins</a> </strong></li>\n<li><strong><a href=\"https://swiftype.com/site-search\">A powerful third party search engine</a> It is a hosted and easy-deploy search solution.</strong></li>\n</ol>\n<p>Finally I adopted the third solution. It's very easy to deploy. You just need to follow instruction to set it up. Someday later I would like to try other two methods.</p>","id":"6341acb1-c251-5aab-bdd9-9b09c7059d31","excerpt":"Because Jekyll is a static website engine. So we cannot implement tradition dynamic searching through traversing database. In this case, I looked for other searching configurations applicable to Jekyll blog to solve the problem. Firstly, what comes up to my head is using Google…","frontmatter":{"title":"Search Bar","excerpt":null,"tags":null},"fields":{"slug":"/blog/2015/09/04/searching.html","date":"September 03, 2015","path":"/2015-09-04-searching.html"}}}},"staticQueryHashes":[]}