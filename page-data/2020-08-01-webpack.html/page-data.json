{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-08-01-webpack.html","result":{"data":{"markdownRemark":{"html":"<h1>Concepts</h1>\n<h2>Entry</h2>\n<p>An entry point indicates which module webpack should use to begin building out its internal dependency graph. </p>\n<h2>Output</h2>\n<p>The output property tells webpack where to emit the bundles it creates and how to name these files. It defaults to <code class=\"language-text\">./dist/main.js</code> for the main output file and to the <code class=\"language-text\">./dist</code> folder for any other generated file.</p>\n<h2>Chunks</h2>\n<p>Chunks come in two forms:</p>\n<ul>\n<li>initial is the main chunk for the entry point. This chunk contains all the modules and its dependencies that you specify for an entry point.</li>\n<li>non-initial is a chunk that may be lazy-loaded. It may appear when dynamic import or SplitChunksPlugin is being used.</li>\n</ul>\n<h2>Compilation</h2>\n<p>Compilation process: </p>\n<ol>\n<li>initializationï¼š read arguments, load plugins and instantiate <code class=\"language-text\">Compiler</code></li>\n<li>start compilation</li>\n<li>find entry</li>\n<li>compile modules and call corresponding loaders: The loader transpiles the match modules.</li>\n<li>complete compilation</li>\n<li>output resources and produce chunks</li>\n<li>complete output: write files to system</li>\n<li>Webpack broadcast different events throughout the process, the plugins subscribe the events will be called and change the final output.</li>\n</ol>\n<div class=\"mermaid\">graph LR\n  A[Compiler]-->B[Compilation]\n  B-->C[Modules]\n  C--Loaders-->D[Parser]\n  D-->E[Output]</div>\n<h3>Compiler Object</h3>\n<p>Compiler  is a singleton. It controls the whole bundling process. </p>\n<ol>\n<li><code class=\"language-text\">acorn</code> library generates the <code class=\"language-text\">AST</code> tree for analyzing the relations of modules.</li>\n<li>The final output is a <code class=\"language-text\">IIFE</code> function.</li>\n<li>During the bundling process, modules are combined into chunks. Chunks combine into chunk groups and form a graph (ChunkGraph) interconnected through modules.</li>\n</ol>\n<h3>Compiler Hooks</h3>\n<p>The Compiler module is the main engine that creates a compilation instance with all the options passed through the CLI or Node API. It is the context containing all information for bundling. Every hot reload and compiling, <code class=\"language-text\">compiler</code> creates a new <code class=\"language-text\">compilation</code> object. It extends the <code class=\"language-text\">Tapable</code> class in order to register and call plugins. Most user facing plugins are first registered on the Compiler. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>someHook<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/1/16767ef8c28837ed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h3>Compilation Object</h3>\n<p>The Compilation object has many methods and hooks available. On this page, we will list the available methods and properties.</p>\n<h3>Compilation Hooks</h3>\n<p>The Compilation module is used by the Compiler to create new compilations (or builds). A compilation instance has access to all modules and their dependencies (most of which are circular references). It is the literal compilation of all the modules in the dependency graph of an application. During the compilation phase, modules are loaded, sealed, optimized, chunked, hashed and restored.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">compilation<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>buildModule<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'SourceMapDevToolModuleOptionsPlugin'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>useSourceMap <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Hot Module Replacement</h3>\n<p>If Hot Module Replacement has been enabled via the HotModuleReplacementPlugin, its interface will be exposed under the module.hot property. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./library.js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something with the updated library module...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Hot Module Replacement process</h4>\n<div class=\"mermaid\">graph LR\ncheck-->ready\nready-->apply\napply-->dispose\ndispose-->apply\napply-->idle</div>\n<h2>Loader</h2>\n<p>Loaders allow webpack to process other types of files and convert them into valid modules that can be consumed by your application and added to the dependency graph.</p>\n<ol>\n<li>\n<p><strong>sync loader</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n@param {string|Buffer} content Content of the resource file\n@param {object} [map] SourceMap data consumable by https://github.com/mozilla/source-map\n@param {any} [meta] Meta data, could be anything\n*/</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">webpackLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// code of your webpack loader</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>async loader</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">webpackLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">someAsyncOperation</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<h2>Plugin</h2>\n<h3>Creating a plugin</h3>\n<p>A plugin for webpack consists of:</p>\n<p>A named JavaScript function or a JavaScript class.\nDefines apply method in its prototype.\nSpecifies an event hook to tap into.\nManipulates webpack internal instance specific data.\nInvokes webpack provided callback after functionality is complete.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A JavaScript class.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyExampleWebpackPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Define `apply` as its prototype method which is supplied with compiler as its argument</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Specify the event hook to attach to</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">.</span><span class=\"token function\">tapAsync</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'MyExampleWebpackPlugin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is an example plugin!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'Hereâ€™s the `compilation` object which represents a single build of assets:'</span><span class=\"token punctuation\">,</span>\n          compilation\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Manipulate the build using the plugin API provided by webpack</span>\n        compilation<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Webpack Overview","tags":["WEBPACK"],"excerpt":"Key concepts of Webpack"},"fields":{"date":"July 31, 2020","path":"/2020-08-01-webpack.html","slug":"/blog/2020/08/01/webpack.html"}}},"pageContext":{"id":"336b5b9e-64af-527e-bc87-8d18245c3031","prev":null,"next":{"id":"b3f8f1ce-836c-55ad-b23d-42ad5e2c4156","frontmatter":{"title":"TypesScript Decorator 01","excerpt":null,"tags":["TYPESCRIPT"]},"fields":{"path":"/2021-06-20-typescript-decorator-01.html"}}}},"staticQueryHashes":[]}